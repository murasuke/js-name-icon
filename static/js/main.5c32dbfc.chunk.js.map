{"version":3,"sources":["iconMaker.ts","IconMakerForm.tsx","App.tsx","index.tsx"],"names":["defaultValue","size","foreColor","backColor","fontScale","fontFamily","iconMaker","name","option","a","opt","width","height","canvas","OffscreenCanvas","context","getContext","Error","splitName","split","abbrev","length","substring","beginPath","ellipse","Math","PI","closePath","clip","fillStyle","fillRect","font","mesure","measureText","centerX","centerY","actualBoundingBoxAscent","actualBoundingBoxDescent","fillText","convertToBlob","blob","imageUrl","URL","createObjectURL","IconMakerForm","props","useState","iconData","setIconData","txtName","setTxtName","downloadCanvasImage","dlLink","document","createElement","href","download","click","remove","type","value","onChange","e","target","onClick","alt","src","App","className","ReactDOM","render","StrictMode","getElementById"],"mappings":"0NAWMA,EAA2B,CAC/BC,KAAM,GACNC,UAAW,UACXC,UAAW,YACXC,UAAW,GACXC,WAAY,cA4CCC,EAzCA,uCAAG,WAAMC,EAAcC,GAApB,uCAAAC,EAAA,yDAEVC,EAFU,2BAEAV,GAAiBQ,GAFjB,EAGQ,CAACE,EAAIT,KAAMS,EAAIT,MAAhCU,EAHS,KAGFC,EAHE,KAMVC,EAAS,IAAIC,gBAAgBH,EAAOC,GACpCG,EAAUF,EAAOG,WAAW,MAPlB,sBAQI,IAAIC,MAAM,0BARd,cAYVC,EAAYX,EAAKY,MAAM,KACvBC,EAAUF,EAAUG,QAAU,EAAIH,EAAU,GAAGI,UAAU,EAAE,GAAKJ,EAAU,GAAGI,UAAU,EAAE,GAAKf,EAAKe,UAAU,EAAG,GAGtHP,EAAQQ,YACRR,EAAQS,QAAQb,EAAQ,EAAGC,EAAS,EAAGD,EAAQ,EAAGC,EAAS,EAAG,EAAG,EAAa,EAAVa,KAAKC,IACzEX,EAAQY,YACRZ,EAAQa,OAGRb,EAAQc,UAAYnB,EAAIP,UACxBY,EAAQe,SAAS,EAAG,EAAW,EAARnB,EAAoB,EAATC,GAGlCG,EAAQc,UAAYnB,EAAIR,UACxBa,EAAQgB,KAAR,eAAuBnB,EAASF,EAAIN,UAApC,cAAmDM,EAAIL,YAGjD2B,EAASjB,EAAQkB,YAAYb,GAC7Bc,EAAUvB,EAAQqB,EAAOrB,MAAQ,GAAKA,EAAQqB,EAAOrB,OAAS,EAAI,EAClEwB,GAAWvB,EAASoB,EAAOI,wBAA0BJ,EAAOK,0BAA4B,EAC9FtB,EAAQuB,SAASlB,EAAQc,EAASC,EAASxB,GAjC3B,UAoCGE,EAAO0B,gBApCV,eAoCVC,EApCU,OAqCVC,EAAWC,IAAIC,gBAAgBH,GArCrB,kBAsCTC,GAtCS,4CAAH,wD,OCaAG,EA5BiB,SAACC,GAAW,IAAD,EACTC,mBAAS,MADA,mBAClCC,EADkC,KACxBC,EADwB,OAEXF,mBAAS,6BAFE,mBAElCG,EAFkC,KAEzBC,EAFyB,KAKnCC,EAAmB,uCAAG,8BAAA1C,EAAA,sEACHH,EAAU2C,GADP,OACpBR,EADoB,OAE1BO,EAAYP,IACNW,EAASC,SAASC,cAAc,MAC/BC,KAAOd,EACdW,EAAOI,SAAW,eAClBJ,EAAOK,QACPL,EAAOM,SAPmB,2CAAH,qDAUzB,OACA,qCACE,gCACE,uBAAOC,KAAK,OAAOC,MAAOX,EAASY,SAAU,SAACC,GAAD,OAAOZ,EAAWY,EAAEC,OAAOH,UACxE,wBAAQI,QAASb,EAAjB,mFAEF,8BACE,qBAAKc,IAAI,OAAOC,IAAKnB,UCdZoB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,W","file":"static/js/main.5c32dbfc.chunk.js","sourcesContent":["// Icon作成オプション\nexport type IconOption = {\n  size?: number,      // iconのサイズ\n  foreColor?: string, // フォントの色\n  backColor?: string, // 背景色\n  fontScale?: number, // フォントのサイズ(iconのサイズに対する比率(0.7程度が適当))\n  fontFamily?: string,// フォントの種類\n};\n\n\n// Icon作成デフォルト値\nconst defaultValue: IconOption = {\n  size: 60,\n  foreColor: '#3c665f',\n  backColor: 'aliceblue',\n  fontScale: 0.7,\n  fontFamily: 'sans-serif'\n};\n\nconst iconMaker = async(name: string, option?: IconOption): Promise<string> => {\n  // デフォルト値をoptionのプロパティーで(あれば)上書き\n  const opt = {...defaultValue, ...option};\n  const [width, height] = [opt.size, opt.size];\n\n  // 描画用のCanvasを用意する\n  const canvas = new OffscreenCanvas(width, height);\n  const context = canvas.getContext('2d');\n  if (!context) throw new Error('could not get context.');\n\n  // スペースを含む場合、splitして最初の2文字を結合する '山田 太郎' -> '山太'。\n  // スペースを含まない場合、先頭2文字にする '山田太郎' -> '山田'\n  const splitName = name.split(' ');\n  const abbrev = (splitName.length >= 2 ? splitName[0].substring(0,1) + splitName[1].substring(0,1) : name.substring(0, 2));\n  \n  // canvasを円形にくり抜く(clip)\n  context.beginPath();\n  context.ellipse(width / 2, height / 2, width / 2, height / 2, 0, 0, Math.PI * 2);\n  context.closePath();\n  context.clip();\n\n  // 背景を塗りつぶす\n  context.fillStyle = opt.backColor;\n  context.fillRect(0, 0, width * 2, height * 2);\n\n  // 名前を描画\n  context.fillStyle = opt.foreColor;\n  context.font = `bold ${height * opt.fontScale}px ${opt.fontFamily}`;\n\n  // 文字の中心を合わせる\n  const mesure = context.measureText(abbrev);\n  const centerX = width - mesure.width > 0 ? (width - mesure.width) / 2 : 0;\n  const centerY = (height + mesure.actualBoundingBoxAscent + mesure.actualBoundingBoxDescent) / 2;\n  context.fillText(abbrev, centerX, centerY, width);\n\n  // Canvasの画像をオブジェクトURLへ変換(imgタグのhrefにセットすると画像を表示できる)\n  const blob = await canvas.convertToBlob();\n  const imageUrl = URL.createObjectURL(blob);\n  return imageUrl;\n};\n\nexport default iconMaker;\n","import './IconMakerForm.css';\nimport React, { useState } from 'react';\nimport iconMaker from './iconMaker';\n\nconst IconMakerForm: React.FC = (props) => {\n  const [iconData, setIconData] = useState(null);\n  const [txtName, setTxtName] = useState('山田 太郎');\n\n  // 画像ダウンロード\n  const downloadCanvasImage = async() => {\n    const imageUrl = await iconMaker(txtName);\n    setIconData(imageUrl);\n    const dlLink = document.createElement(\"a\"); \n    dlLink.href = imageUrl;\n    dlLink.download = 'nameicon.png';\n    dlLink.click();\n    dlLink.remove();  \n  };\n\n  return (\n  <>\n    <div>\n      <input type=\"text\" value={txtName} onChange={(e) => setTxtName(e.target.value)}></input>      \n      <button onClick={downloadCanvasImage}>アイコンをダウンロード</button>\n    </div>\n    <div>\n      <img alt='icon' src={iconData} />\n    </div>\n  </>\n  );\n};\n\nexport default IconMakerForm;\n","import React from 'react';\nimport IconMakerForm from './IconMakerForm';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IconMakerForm />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}